{"ast":null,"code":"import { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let PlayerService = /*#__PURE__*/(() => {\n  class PlayerService {\n    constructor(http) {\n      this.http = http;\n      this.playersUrl = 'api/players'; // URL to web api\n\n      this.statisticUrl = 'api/statistic'; // URL to web api\n    }\n    /** GET players from the server */\n\n\n    getPlayers() {\n      return this.http.get(this.playersUrl);\n    }\n\n    getStatistics(first_id, second_id) {\n      // In memory web API doesn't handle this case:\n      // var requestUrl = this.statisticUrl + '/' + first_id + '/' + second_id;\n      //   return this.http.get<Statistic>(requestUrl)\n      // So just returning results as if we had web communication.\n      var statistic = {\n        winner_id: 0,\n        winner_probability: 0.0\n      }; // Yes, I'm being lazy and not including math for abs.\n\n      var abs_difference = 0;\n\n      if (first_id > second_id) {\n        statistic.winner_id = first_id;\n        abs_difference = first_id - second_id;\n      } else {\n        statistic.winner_id = second_id;\n        abs_difference = second_id - first_id;\n      }\n\n      if (abs_difference > 10) {\n        statistic.winner_probability = 0.8;\n      } else {\n        statistic.winner_probability = 0.6;\n      }\n\n      var returnValue = of(statistic);\n      return returnValue;\n    }\n\n  }\n\n  PlayerService.ɵfac = function PlayerService_Factory(t) {\n    return new (t || PlayerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PlayerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PlayerService,\n    factory: PlayerService.ɵfac,\n    providedIn: 'root'\n  });\n  return PlayerService;\n})();","map":null,"metadata":{},"sourceType":"module"}